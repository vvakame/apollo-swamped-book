= 魔法のApollo

技術書典5ではGraphQLサーバをGo言語で作るというネタをやりました。
今回は、所変わってクライアント側を普通にReact+TypeScript+Apolloでやっていきつつある話をします。

最初に断っておきますが、筆者はReactのクンフーはあまり積んでいません。
さらに、Apolloも始めたばかりに近い…ので、熟練者の人の役に立つ話ではありません。
要するに何がいいたいかというと、今回のネタは"Apollo泣き言集"だぞ！ってことです。
ふえぇApollo難しいでしゅう…。

== GraphQLの概要

TODO

== クライアントサイドにおけるGraphQLのアドバンテージ

TODO

== Apolloという魔法

TODO
Apolloは非常に複雑なことをしている 驚異的なまでに。
文字列テンプレートリテラルで書いたGraphQLのクエリやらをパースしてくれる。
書いたクエリやらに対してTypeScriptの方を生成してくれる。
アプリのマシンローカルの状態管理もやってくれる。
リモートとローカルへのクエリを混ぜて書ける。
キャッシュも賢くやってくれる。
素晴らしい！かもね。

=== 基本的な使い方

TODO

== Apolloドハマリメモ

TODO
はい。しかしドハマリはしてしまうものです。
Apolloは非常に高機能で、コンパイルの通らない状態のtsやtsxでも正しく処理してくれる場合が多いです。
しかしながら、細かい仕様や挙動を把握しきれないことが多く、血反吐を吐いたりしつつ暮らしています。
デバッグログとかもうちょっと吐かせられないものか…。

公式ドキュメントが無駄に長ったらしいくせに網羅的な仕様の解説でもなく、サンプルコードは一部の抜粋で全体がわかりにくくcode sandboxみたいなのも併設されていない…！

=== MutationとfetchMoreの謎

TODO

@connection も謎だった。罠。
Relay Cursor Connections Specificationとかあるし、自動的にデータの継ぎ足しをすることも可能であると思われる。
しかし、期待に反して自動的に継ぎ足しはしてくれないのである。

わかりにくい点。
 1. 継ぎ足しのクエリは別途作成しなければならない。継ぎ足しに不要な部分を自動的に削って再利用してくれたりはしない。
 2. 得られた継ぎ足しデータは最初のクエリの結果に自分で合成しなければならない。
 3. 継ぎ足しを実行するのは関連するComponentではなくて最初のクエリの近くに配置したほうがよい。fetchMoreを引き回すのとどっちがいいかという話でしかないけど。

=== キャッシュとの戦い

TODO
2.5から本体に取り込まれたらしい。
cache.writeQueryとかcache.writeDataとかcache.writeFragmentとかマジでいろいろある…。
TODO それぞれの違いの解説

わかりにくい点。
 1. writeData でschemaに対してぶっ壊れたデータ書いても怒られない。しかし後で挙動がおかしくなって原因はわからず脳が爆発する。関係ないQueryの結果が真っ白に書き換わったりする。
 2. ローカルなresolverを定義するのは最後の手段…が良さそうかなぁ writeData でなんとかしたい
 ** 計算処理を定義するより、キャッシュ上にドンピシャなデータをwriteしてそれを保持したほうが脳が楽そう
 3. writeData ではschemaにあった形式をwriteしないといけない
 4. refetchQueriesでピタゴラスイッチしようとすると爆発四散する
 ** 話がわかりにくいけど… @client で ほげほげID を保持して別のところでほげほげIDからデータを持ってきて…としようとするとよくない
 ** ほげほげIDをセットしたら、データとして保持するのはそのIDではなくて、引っ張ってきたデータを保持する 2段階右折みたいなことしない
 ** ほげほげを編集する時ほげほげEditみたいな型をローカル側で作らない 元のデータ型のまま扱う Submit時のInputへの変形はReactのレベルで頑張る
 5. @export で頑張ったりするのはかなりつらい
 ** ID に対して null だったら Boolean! に変換するみたいなのがつらい
 ** 動的に引数が変わるようなコード書くと、query と variables の組み合わせが変わるのでrefetchQueryが意図どおり適用されない疑惑がある(勘違いの可能性もあるので要検証)

== 現時点でのベストプラクティス

TODO

== 日本におけるGraphQLコミュニティ（の不在）

TODO
